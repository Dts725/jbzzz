<template>
  <div class="login-container">
    <el-form class="login-form" autoComplete="on" :model="loginForm" :rules="loginRules" ref="loginForm"
             label-position="left">
      <h3 class="title">进博一线党建管理系统</h3>
      <el-form-item prop="username">
        <span class="svg-container svg-container_login">
          <svg-icon icon-class="user"/>
        </span>
        <el-input name="username" type="text" v-model="loginForm.username" autoComplete="on" clearable placeholder="username"/>
      </el-form-item>
      <el-form-item prop="password">
        <span class="svg-container">
          <svg-icon icon-class="password"></svg-icon>
        </span>
        <el-input name="password" :type="pwdType" @keyup.enter.native="handleLogin" v-model="loginForm.password"
                  autoComplete="on" clearable
                  placeholder="password"
        ></el-input>
        <span class="show-pwd" @click="showPwd"><svg-icon icon-class="eye"/></span>
      </el-form-item>
      <el-form-item>
        <el-button class="btn-red" type="" style="width:100%;" :loading="loading" @click.native.prevent="handleLogin">
          登 录
        </el-button>
      </el-form-item>
    </el-form>
    <img class="login-bg" src="../../../static/login_bj.jpg" alt="">
  </div>
</template>

<script>
  import {isvalidUsername} from '@/utils/validate';
  import {setName} from '@/utils/auth';
  import http from '@/api/http';
  import {Message, MessageBox} from 'element-ui';

  export default {
    name: 'login',
    data() {
      const validateUsername = (rule, value, callback) => {
        if (!isvalidUsername(value)) {
          callback(new Error('请输入正确的用户名'))
        } else {
          callback()
        }
      }
      const validatePass = (rule, value, callback) => {
        if (value.length < 5) {
          callback(new Error('密码不能小于5位'))
        } else {
          callback()
        }
      }
      return {
        loginForm: {
          username: '',
          password: ''
        },
        loginRules: {
          username: [
            {required: true, trigger: 'blur', message: '请输入用户名'},
            {min: 3, max: 30, message: '长度在 3 到 30 个字符', trigger: 'blur'}
          ],
          password: [
            {required: true, trigger: 'blur', message: '请输入密码'},
            {min: 6, max: 30, message: '长度在 6 到 30 个字符', trigger: 'blur'}
          ]
        },
        // loginRules: {
        //   username: [{required: true, trigger: 'blur',message: '请输入正确的用户名', validator: validateUsername}],
        //   password: [{required: true, trigger: 'blur', validator: validatePass}]
        // },
        loading: false,
        pwdType: 'password'
      }
    },
    methods: {
      showPwd() {
        if (this.pwdType === 'password') {
          this.pwdType = ''
        } else {
          this.pwdType = 'password'
        }
      },
      handleLogin() {
        let _this = this, dat = {};
        this.$refs.loginForm.validate(valid => {
          if (valid) {
            this.loading = true;
            http.http('/admin_user/login', {
              username: this.loginForm.username,
              password: this.loginForm.password,
              // type: 2
            }, 'post').then(res => {
              if (res.code == 0) {
                this.loading = false;
                dat = {
                  username: res.data.username,
                  community_id: res.data.community_id,
                  community_name: res.data.community_name,
                  role_id: res.data.role_id,
                  role_name: res.data.role_name,
                  type: res.data.type
                };
                this.storage.setStorage('uinfo', JSON.stringify(dat));
                setName('name');
                _this.$router.push({path: '/partyMember/member'});
                // setTimeout(() => {
                //   console.log('准备跳转...');
                //   // _this.$router.push({name: 'Appointment'});
                //   _this.$router.push({ path: '/appointment/table' });
                //   // _this.$router.replace('/appointment/table');
                //   // debugger;
                //   // _this.$router.push({path: '/'});
                // }, 200);
                // this.$router.push({name: 'Appointment'});
              } else {
                Message({
                  message: res.data.status,
                  type: 'error',
                  duration: 1500
                });
              }
            });
          } else {
            console.log('error submit!!')
          }

          //   this.loading = true;
          //   this.$store.dispatch('Login', this.loginForm).then((res) => {
          //     this.loading = false;
          //     setName('name');
          //     this.$router.push({ path: '/' })
          //   }).catch(() => {
          //     this.loading = false
          //   })
          // } else {
          //   console.log('error submit!!')
          //   return false
          // }

        });
      }
    }
  }
</script>

<style rel="stylesheet/scss" lang="scss">
  $bg: #2d3a4b;
  $light_gray: #eee;

  /* reset element-ui css */
  .login-container {
    .el-input {
      display: inline-block;
      height: 47px;
      width: 85%;
      input {
        background: transparent;
        border: 0px;
        -webkit-appearance: none;
        border-radius: 0px;
        padding: 12px 5px 12px 15px;
        // color: $light_gray;
        height: 47px;
        /*&:-webkit-autofill {
          -webkit-box-shadow: 0 0 0px 1000px $bg inset !important;
          -webkit-text-fill-color: #fff !important;
        }*/
        &:-webkit-autofill {
          background-color: #fff !important;
          color: inherit !important;
        }
      }
    }
    .el-form-item {
      /*border: 1px solid rgba(255, 255, 255, 0.1);*/
      /*background: rgba(0, 0, 0, 0.1);*/
      /*border-radius: 5px;*/
      color: #454545;
      border: 1px solid #ddd;
      border-radius: 5px;
      background: transparent;
    }
  }

</style>

<style rel="stylesheet/scss" lang="scss" scoped>
  $bg: #2d3a4b;
  $dark_gray: #889aa4;
  $light_gray: #eee;
  .login-container {
    position: fixed;
    height: 100%;
    width: 100%;
    //background-color: $bg;
    .login-form {
      position: absolute;
      left: calc(50% - 260px);
      top: calc(50% - 128px);
      width: 520px;
      padding: 4rem 3rem 2rem;
      background-color: #fff;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      border-radius: 0.5rem;
    }

    .svg-container {
      padding: 6px 5px 6px 15px;
      color: $dark_gray;
      vertical-align: middle;
      width: 30px;
      display: inline-block;
      &_login {
        font-size: 20px;
      }
    }
    .title {
      font-size: 32px;
      font-weight: 500;
      color: #ea0d18;
      margin: 0 auto 40px;
      text-align: center;
    }
    .show-pwd {
      position: absolute;
      right: 10px;
      top: 7px;
      font-size: 16px;
      color: $dark_gray;
      cursor: pointer;
      user-select: none;
    }
  }
  .login-bg{
    width:100%;
    height: 100%;
    position: absolute;
    z-index: -1;
  }
  .btn-red{
    background-color: #ea0d18;
    color: #fff;
    border:none;
    outline: none;
    padding: 1rem 0;
    font-size:1.3rem;
  }
</style>
